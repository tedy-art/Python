STACK:-

Operations are performed LIFO (last in, first out), which means that the last
element added will be the first one removed. A stack can be implemented using
an array or a linked list. If the stack runs out of memory, it’s called a stack
overflow.

Basic Operations of stack:-
There are some basic operations that allow us to perform different actions on a stack.
Push:   Add an element to the top of a stack.
Pop:    Remove an element from the top of a stack.
IsEmpty:    Check if the stack is empty.
IsFull:     Check if the stack is full.
Peek:   Get the value of the top element without removing it.

The functions associated with stack are:

empty() –Returns whether the stack is empty – Time Complexity: O(1)
size() –Returns the size of the stack – Time Complexity: O(1)
top()/peek()–Returns a reference to the topmost element of the stack–Time Complexity: O(1)
push(a) –Inserts the element ‘a’ at the top of the stack – Time Complexity: O(1)
pop() –Deletes the topmost element of the stack – Time Complexity: O(1)


Implementation:
There are various ways from which a stack can be implemented in Python. This article
covers the implementation of a stack using data structures and modules from the Python
library.
Stack in Python can be implemented using the following ways:
1.list
2.Collections.deque
3.queue.LifoQueue

Implementation using list:
Python’s built-in data structure list can be used as a stack. Instead of push(),
append() is used to add elements to the top of the stack while pop() removes the
element in LIFO order.

the list has a few shortcomings.
1.The biggest issue is that it can run into speed issues as it grows.
2.The items in the list are stored next to each other in memory, if the stack
  grows bigger than the block of memory that currently holds it, then Python
  needs to do some memory allocations.
 3.This can lead to some append() calls taking much longer than other ones.



Working of Stack Data Structure
The operations work as follows:
    1.A pointer called TOP is used to keep track of the top element in the stack.
    2.When initializing the stack, we set its value to -1 so that we can check if
      the stack is empty by comparing TOP == -1.
    3.On pushing an element, we increase the value of TOP and place the new element
      in the position pointed to by TOP.
    4.On popping an element, we return the element pointed to by TOP and reduce its
      value.
    5.Before pushing, we check if the stack is already full
    5.Before popping, we check if the stack is already empty