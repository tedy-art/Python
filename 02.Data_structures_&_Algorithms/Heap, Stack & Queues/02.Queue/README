Queue:
Operations are performed FIFO (first in, first out), which means that the first element
added will be the first one removed. A queue can be implemented using an array.



Basic Operations of Queue
A queue is an object (an abstract data structure - ADT) that allows the following
operations:

1.Enqueue: Add an element to the end of the queue.
2.Dequeue: Remove an element from the front of the queue.
3.IsEmpty: Check if the queue is empty.
4.IsFull: Check if the queue is full.
5.Peek: Get the value of the front of the queue without removing it.



Working of Queue
Queue operations work as follows:
1.two pointers FRONT and REAR
2.FRONT track the first element of the queue
3.REAR track the last element of the queue
4.initially, set value of FRONT and REAR to -1



Enqueue Operation
1.check if the queue is full
2.for the first element, set the value of FRONT to 0
3.increase the REAR index by 1
4.add the new element in the position pointed to by REAR


Dequeue Operation
1.check if the queue is empty
2.return the value pointed by FRONT
3.increase the FRONT index by 1
4.for the last element, reset the values of FRONT and REAR to -1


Ex._
# Queue implementation in Python
class Queue:

    def __init__(self):
        self.queue = []

    # Add an element
    def enqueue(self, item):
        self.queue.append(item)

    # Remove an element
    def dequeue(self):
        if len(self.queue) < 1:
            return None
        return self.queue.pop(0)

    # Display  the queue
    def display(self):
        print(self.queue)

    def size(self):
        return len(self.queue)


q = Queue()
q.enqueue(1)
q.enqueue(2)
q.enqueue(3)
q.enqueue(4)
q.enqueue(5)

q.display()

q.dequeue()

print("After removing an element")
q.display()


Types of Queues
In this tutorial, you will learn different types of queues with along with
illustration.

A queue is a useful data structure in programming. It is similar to the ticket queue
outside a cinema hall, where the first person entering the queue is the first person who gets the ticket.


There are four different types of queues:
1.Simple Queue
2.Circular Queue
3.Priority Queue
4.Double Ended Queue


1.Simple Queue
In a simple queue, insertion takes place at the rear and removal occurs at the front.
It strictly follows the FIFO (First in First out) rule.


2.Circular Queue
In a circular queue, the last element points to the first element making a circular
link.
The main advantage of a circular queue over a simple queue is better memory
utilization. If the last position is full and the first position is empty, we can
insert an element in the first position. This action is not possible in a simple
queue.


3.Priority Queue
A priority queue is a special type of queue in which each element is associated with
a priority and is served according to its priority. If elements with the same
priority occur, they are served according to their order in the queue.

Insertion occurs based on the arrival of the values and removal occurs based on
priority.



4.Deque (Double Ended Queue)
In a double ended queue, insertion and removal of elements can be performed from
either from the front or rear. Thus, it does not follow the FIFO (First In First Out)
rule.
